/*
---
title: Mixins
name: mixin
category: tools
---
*/





/*
---
Inuit mixins
---
*/
@import "../bower_components/inuit-mixins/_tools.mixins";






/*
---
title: Mixin border-radius
name: mixin-border-radius
parent: mixin
---

Add prefix vendor for border-radius

- `$radius`: The radius for each corner

```scss
@mixin rounded($radius) {...}
```
*/
@mixin rounded($radius) {
  -webkit-border-radius: $radius;
     -moz-border-radius: $radius;
      -ms-border-radius: $radius;
       -o-border-radius: $radius;
          border-radius: $radius;
}





/*
---
title: Mixin shadow
name: mixin-shadow
parent: mixin
---

A mixin for creating drop shadows

- `$x`:     Vertical position of the shadow
- `$y`:     Horizontal position of the shadow
- `$blur`:  Amount of blur
- `$color`: The color

```scss
@mixin shadow($x, $y, $blur, $color) {...}
```
*/
 @mixin shadow($x, $y, $blur, $color) {
  -webkit-box-shadow: $x $y $blur $color;
     -moz-box-shadow: $x $y $blur $color;
          box-shadow: $x $y $blur $color;
}






/*
---
title: Mixin shadow inset
name: mixin-shadow-inset
parent: mixin
---

A mixin for creating inset shadows

- `$x`:     Vertical position of the shadow
- `$y`:     Horizontal position of the shadow
- `$blur`:  Amount of blur
- `$color`: The color

```scss
@mixin shadow-inset($x, $y, $blur, $color) {...}
```
*/
@mixin shadow-inset($x, $y, $blur, $color) {
  -webkit-box-shadow: inset $x $y $blur $color;
     -moz-box-shadow: inset $x $y $blur $color;
          box-shadow: inset $x $y $blur $color;
}





/*
---
title: Mixin transition
name: mixin-transition
parent: mixin
---

Add vendor prefix for transition

- `$property`: The kind of animation

```scss
@mixin transition($property) {...}
```
*/
@mixin transition($property) {
  -webkit-transition: $property .2s ease;
     -moz-transition: $property .2s ease;
       -o-transition: $property .2s ease;
          transition: $property .2s ease;
}





/*
---
title: Mixin box-sizing
name: mixin-box-sizing
parent: mixin
---

Box-sizing will change the box-model of the element it is applied to.

```scss
@mixin box-sizing {...}
```
*/
@mixin box-sizing {
  -webkit-box-sizing: border-box;
     -moz-box-sizing: border-box;
          box-sizing: border-box;
}





/*
---
title: Mixin linear gradient
name: mixin-linear-gradient
parent: mixin
---

A mixin for creating linear gradient

- `$from`: From hex color
- `$to`:   To hex color

```scss
@mixin linear-gradient($from, $to) {...}
```
*/
@mixin linear-gradient($from, $to) {
  /* Fallback for sad browsers */
  background-color: $to;
  /* Mozilla Firefox */
  background-image:    -moz-linear-gradient($from, $to);
  /* Opera */
  background-image:      -o-linear-gradient($from, $to);
  /* WebKit (Safari 4+, Chrome 1+) */
  background-image:        -webkit-gradient(linear,left top, left bottom, color-stop(0, $from), color-stop(1, $to));
  /* WebKit (Chrome 11+) */
  background-image: -webkit-linear-gradient($from, $to);
  /* IE10 */
  background-image:     -ms-linear-gradient($from, $to);
  /* W3C */
  background-image:         linear-gradient($from, $to);
}





/*
---
title: Mixin flexbox
name: mixin-flexbox
parent: mixin
---

The following mixins will help you with the flex*flexa* things.
*/





/*
---
title: Mixin flexbox container
name: mixin-flexbox-container
parent: mixin-flexbox
---

The 'flex' value causes an element to generate a block-level flex container box.

The 'inline-flex' value causes an element to generate a inline-level flex container box.

`display: flex | inline-flex`

http://w3.org/tr/css3-flexbox/#flex-containers

(Placeholder selectors for each type, for those who rather @extend)

```scss
@mixin flexbox {...};
@mixin inline-flex {...};
```
*/
@mixin flexbox {
	display: -webkit-box;
	display: -webkit-flex;
	display: -moz-flex;
	display: -ms-flexbox;
	display: flex;
}

%flexbox { @include flexbox; }

//----------------------------------

@mixin inline-flex {
	display: -webkit-inline-box;
	display: -webkit-inline-flex;
	display: -moz-inline-flex;
	display: -ms-inline-flexbox;
	display: inline-flex;
}

%inline-flex { @include inline-flex; }





/*
---
title: Mixin flexbox grow
name: mixin-flexbox-grow
parent: mixin-flexbox
---

The 'flex-grow' property sets the flex grow factor. Negative numbers are invalid.

- `$int`: Grow (Default: `0`)

```scss
@mixin flex-grow($int: 0) {...};
```
*/
@mixin flex-grow($int: 0) {
	-webkit-box-flex: $int;
	-webkit-flex-grow: $int;
	-moz-flex-grow: $int;
	-ms-flex-positive: $int;
	flex-grow: $int;
}





/*
---
title: Mixin flexbox align items
name: mixin-flexbox-align-items
parent: mixin-flexbox
---

Flex items can be aligned in the cross axis of the current line of the flex
container, similar to 'justify-content' but in the perpendicular direction.
'align-items' sets the default alignment for all of the flex container's items,
including anonymous flex items. 'align-self' allows this default alignment to
be overridden for individual flex items. (For anonymous flex items, 'align-self'
always matches the value of 'align-items' on their associated flex container.)

Values: flex-start | flex-end | center | baseline | stretch

- `$value`: Value of the stretch (Default: `stretch`)

[W3C specs](http://w3.org/tr/css3-flexbox/#align-items-property)

```scss
@mixin align-items($value: stretch) {...};
```
*/
@mixin align-items($value: stretch) {
	@if $value == flex-start {
		-webkit-box-align: start;
		-ms-flex-align: start;
	} @else if $value == flex-end {
		-webkit-box-align: end;
		-ms-flex-align: end;
	} @else {
		-webkit-box-align: $value;
		-ms-flex-align: $value;
	}
	-webkit-align-items: $value;
	-moz-align-items: $value;
	align-items: $value;
}





/*
---
title: Mixin center block
name: mixin-center-block
parent: mixin
---

Set an element to `display: block` and center via margin.

```scss
@mixin center-block {...}
```
*/
@mixin center-block {
  display: block;
  margin-left: auto;
  margin-right: auto;
}





/*
---
title: Mixin screen reader only
name: mixin-sr-only
parent: mixin
---

The content can only be read by screen reader

```scss
@mixin sr-only {...}
```
*/
@mixin sr-only {
  position: absolute !important;
  overflow: hidden;
  width: 1px;
  height: 1px;
  padding: 0;
  border: 0;
  clip: rect(1px, 1px, 1px, 1px);
}




/*
---
title: Mixin transition
name: mixin-transition
parent: mixin
---

```scss
@mixin transition {...}
```
*/
@mixin transition ($property: all, $duration: 1s, $function: false, $delay: false) {
  @if $delay != false {
    transition-delay: $delay;
  }
  transition-duration: $duration;
  transition-property: $property;
  @if $function != false {
    transition-timing-function: $function;
  }
}
