// Breakpoint mixin
//
// [Info about this mixins](https://medium.com/p/889927b37740/)
//
// ## From small to large
//
// You can use the following values with this mixins like so `@include breakpoint(md){...};`:
//   - `xs`: Extra small
//   - `sm`: Small
//   - `md`: Medium
//   - `lg`: Large
//
//
// The values are set in the [`_settings.defaults.scss`](sass-01-settings-settings.defaults.html) file
//
// ## Custom parameters
//
// You can use custom parameters.
//
//   - `@include breakpoint(400px, 800px){...};`: From 400px to 800px
//   - `@include breakpoint(400px, 0){...};`: 400px and more
//   - `@include breakpoint(0, 400px){...};`: 400px and less
@mixin breakpoint($min: 0, $max: 0) {
  $type: type-of($min);

  @if $type == string {
    @if $min == xs {
      @media (max-width: $base-break-xs) { @content; }       // Mobile Devices
    }

    @else if $min == sm {
      @media (min-width: $base-break-xs+1) { @content; }       // Tablet Devices
    }

    @else if $min == md {
      @media (min-width: $base-break-sm) { @content; }       // Desktops
    }

    @else if $min == lg {
      @media (min-width: $base-break-md) { @content; }      // Widescreen Desktops
    }

    // Otherwise pass a warning to the compiler as to the appropriate options
    @else {
      @warn "The breakpoint mixin supports the following attributes: xs, sm, md, lg";
    }
  }
  @else if $type == number {
    // Allow for custom parameters for min and max size
    $query: "all" !default;
    @if      $min != 0 and $max != 0 { $query: "(min-width: #{$min}) and (max-width: #{$max})"; } // set both min and max
    @else if $min != 0 and $max == 0 { $query: "(min-width: #{$min})"; } // set just min
    @else if $min == 0 and $max != 0 { $query: "(max-width: #{$max})"; } // set just max
    @media #{$query} { @content; }
  }
}





// Mixin border-radius
//
// Add prefix vendor for border-radius
//
//   - `$radius`: The radius for each corner
@mixin rounded($radius) {
  -webkit-border-radius: $radius;
     -moz-border-radius: $radius;
      -ms-border-radius: $radius;
       -o-border-radius: $radius;
          border-radius: $radius;
}





// Mixin shadow
//
// A mixin for creating drop shadows
//
//   - `$x`:     Vertical position of the shadow
//   - `$y`:     Horizontal position of the shadow
//   - `$blur`:  Amount of blur
//   - `$color`: The color
 @mixin shadow($x, $y, $blur, $color) {
  -webkit-box-shadow: $x $y $blur $color;
     -moz-box-shadow: $x $y $blur $color;
          box-shadow: $x $y $blur $color;
}






// Mixin Shadow inset
//
// A mixin for creating inset shadows
//
//   - `$x`:     Vertical position of the shadow
//   - `$y`:     Horizontal position of the shadow
//   - `$blur`:  Amount of blur
//   - `$color`: The color
@mixin shadow-inset($x, $y, $blur, $color) {
  -webkit-box-shadow: inset $x $y $blur $color;
     -moz-box-shadow: inset $x $y $blur $color;
          box-shadow: inset $x $y $blur $color;
}





// Mixin transition
//
// Add vendor prefix for transition
//
//   - `$property`: The kind of animation
@mixin transition($property) {
  -webkit-transition: $property .2s ease;
     -moz-transition: $property .2s ease;
       -o-transition: $property .2s ease;
          transition: $property .2s ease;
}




// Mixin box-sizing
//
// Box-sizing will change the box-model of the element it is applied to.
@mixin box-sizing {
  -webkit-box-sizing: border-box;
     -moz-box-sizing: border-box;
          box-sizing: border-box;
}





// Mixin linear gradient
//
// A mixin for creating linear gradient
//
//   - `$from`: From hex color
//   - `$to`:   To hex color
@mixin linear-gradient($from, $to) {
  /* Fallback for sad browsers */
  background-color: $to;
  /* Mozilla Firefox */
  background-image:    -moz-linear-gradient($from, $to);
  /* Opera */
  background-image:      -o-linear-gradient($from, $to);
  /* WebKit (Safari 4+, Chrome 1+) */
  background-image:        -webkit-gradient(linear,left top, left bottom, color-stop(0, $from), color-stop(1, $to));
  /* WebKit (Chrome 11+) */
  background-image: -webkit-linear-gradient($from, $to);
  /* IE10 */
  background-image:     -ms-linear-gradient($from, $to);
  /* W3C */
  background-image:         linear-gradient($from, $to);
}





// Mixin Flexbox Containers
//
// The 'flex' value causes an element to generate a block-level flex
// container box.
//
// The 'inline-flex' value causes an element to generate a inline-level
// flex container box.
//
// display: flex | inline-flex
//
// http://w3.org/tr/css3-flexbox/#flex-containers
//
// (Placeholder selectors for each type, for those who rather @extend)

@mixin flexbox {
	display: -webkit-box;
	display: -webkit-flex;
	display: -moz-flex;
	display: -ms-flexbox;
	display: flex;
}

%flexbox { @include flexbox; }

//----------------------------------

@mixin inline-flex {
	display: -webkit-inline-box;
	display: -webkit-inline-flex;
	display: -moz-inline-flex;
	display: -ms-inline-flexbox;
	display: inline-flex;
}

%inline-flex { @include inline-flex; }





// Flexbox Grow
//
// The 'flex-grow' property sets the flex grow factor. Negative numbers
// are invalid.
//
// Default: 0
@mixin flex-grow($int: 0) {
	-webkit-box-flex: $int;
	-webkit-flex-grow: $int;
	-moz-flex-grow: $int;
	-ms-flex-positive: $int;
	flex-grow: $int;
}





// Flexbox Align Items
//
// Flex items can be aligned in the cross axis of the current line of the
// flex container, similar to 'justify-content' but in the perpendicular
// direction. 'align-items' sets the default alignment for all of the flex
// container's items, including anonymous flex items. 'align-self' allows
// this default alignment to be overridden for individual flex items. (For
// anonymous flex items, 'align-self' always matches the value of 'align-items'
// on their associated flex container.)
//
// Values: flex-start | flex-end | center | baseline | stretch
// Default: stretch
//
// http://w3.org/tr/css3-flexbox/#align-items-property

@mixin align-items($value: stretch) {
	@if $value == flex-start {
		-webkit-box-align: start;
		-ms-flex-align: start;
	} @else if $value == flex-end {
		-webkit-box-align: end;
		-ms-flex-align: end;
	} @else {
		-webkit-box-align: $value;
		-ms-flex-align: $value;
	}
	-webkit-align-items: $value;
	-moz-align-items: $value;
	align-items: $value;
}





// Mixin center block
//
// Set an element to `display: block` and center via margin.
@mixin center-block {
  display: block;
  margin-left: auto;
  margin-right: auto;
}





// Mixin screen reader only
//
// The content can only be read by screen reader
@mixin sr-only {
  position: absolute !important;
  overflow: hidden;
  width: 1px;
  height: 1px;
  padding: 0;
  border: 0;
  clip: rect(1px, 1px, 1px, 1px);
}
